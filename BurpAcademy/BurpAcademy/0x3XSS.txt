XSS
alert fuction in chrome not working due safty but we can use peint()

Types of xss
Reflected XSS in where the mlicious script commes from the currnt http request
Stored XSS Where the milious code comes form the web database
DOM-Based XSS where vulnerability exists in client code rather than sever-side code

Reflected cross-site scripting vs self xss
Self-XSS involves similar application behavior to regular reflected XSS, however it cannot be triggered in normal ways via a crafted URL or a cross-domain request. Instead, the vulnerability is only triggered if the victim themselves submits the XSS payload from their browser.

What is the difference between reflected XSS and stored XSS? 
Reflected XSS arises when an application takes some input from an HTTP request and embeds that input into the immediate response in an unsafe way. With stored XSS, the application instead stores the input and embeds it into a later response in an unsafe way.

Reflected cross-site scripting 
in search parameter we can see it it vurable to reflected xss but not self xss because as attacker we can provide link to victim
https://insecure-website.com/search?term=<script>/*+Bad+stuff+here...+*/</script>

Impact of reflected xss are:-
Fully compromise the user(victim)
1:-Asking for money like if vulnerable found in twitter and attacker can manupulate the code and ask for money
...etc

How to find xss
https://owasp.org/www-project-web-security-testing-guide/v41/4-Web_Application_Security_Testing/07-Input_Validation_Testing/01-Testing_for_Reflected_Cross_Site_Scripting
+experience 

Evasion
https://cheatsheetseries.owasp.org/cheatsheets/XSS_Filter_Evasion_Cheat_Sheet.html#basic-xss-test-without-filter-evasion
____________________________________________________________________________________-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=


Stored cross-site scripting (also known as second-order or persistent XSS) 
The name it's self define the defination means stored xss is what which is presitent in source code in which we can see the chnges indirectly
                     OR 
 arises when an application receives data from an untrusted source and includes that data within its later HTTP responses in an unsafe way 
                     OR
 stored XSS, the application instead stores the input and embeds it into a later response in an unsafe way.

Impact of stored XSS attacks
If an attacker can control a script that is executed in the victim's browser, then they can typically fully compromise that user. The attacker can carry out any of the actions that are applicable to the impact of reflected XSS vulnerabilities.

How to found 
https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/07-Input_Validation_Testing/02-Testing_for_Stored_Cross_Site_Scripting
CAN WORK WITH XSS, STORED XSS ,DOM XSS TOO 
________________________________________________________________________________________-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
Dom-based Cross-Site Scripting
DOM-based XSS is complex but when we see the code of *.js like 
Q1-:DOM XSS in document.write sink using source location.search

1:-https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-document-write-sink

                    <script>
            -------+> function trackSearch(query) { //custum function name trackSearch() inside query is taken
            |               document.write('<img src="/resources/images/tracker.gif?searchTerms='+query+'">'); // search query  is binded over images tracker which is +query+
            |                                            see this src <img/>                                      our query which no filter in which we can put payload 
            |            }
            |          
   step 1 ^           var query = (new URLSearchParams(window.location.search)).get('search'); //it get search result form the winodw.location.search
             |           if(query) {                                    
            ^-------+> trackSearch(query);                   
                        }                                                 
                    </script>                                           
1-: Enter a random alphanumeric string into the search box.
2-: Right-click and inspect the element, and observe that your random string has been placed inside an img src attribute.
3-: Break out of the img attribute by searching for: "><svg onload=alert(1)>
                                                                         
                                                                                     
OR
2-:DOM XSS in document.write sink using source location.search inside a select element
https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-document-write-sink-inside-select-element
 <script>
                                var stores = ["London","Paris","Milan"];
                                var store = (new URLSearchParams(window.location.search)).get('storeId');
                                document.write('<select name="storeId">');
                                if(store) {
                                    document.write('<option selected>'+store+'</option>');
                                }
                                for(var i=0;i<stores.length;i++) {
                                    if(stores[i] === store) {
                                        continue;
                                    }
                                    document.write('<option>'+stores[i]+'</option>');
                                }
                                document.write('</select>');
                            </script>

1-: On the product pages, notice that the dangerous JavaScript extracts a storeId parameter from the location.search source. It then uses document.write to create a new option in the select element for the stock checker functionality.
2-: Add a storeId query parameter to the URL and enter a random alphanumeric string as its value. Request this modified URL.
3-: In your browser, notice that your random string is now listed as one of the options in the drop-down list.
4-: Right-click and inspect the drop-down list to confirm that the value of your storeId parameter has been placed inside a select element.
5-: Change the URL to include a suitable XSS payload inside the storeId parameter as follows:
product?productId=1&storeId="></select><img%20src=1%20onerror=alert(1)>
              OR
3-: DOM XSS in innerHTML sink using source location.search
3-: https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-innerhtml-sink
	
	<script>
                            function doSearchQuery(query) {
                                document.getElementById('searchMessage').innerHTML = query;
                            }
                            var query = (new URLSearchParams(window.location.search)).get('search');
                            if(query) {
                                doSearchQuery(query);
                            }
                        </script>
ANs:-
1-: Enter the following into the into the search box: <img src=1 onerror=alert(1)>
2-: Click "Search".
Guide
The value of the src attribute is invalid and throws an error. This triggers the onerror event handler, which then calls the alert() function. As a result, the payload is executed whenever the user's browser attempts to load the page containing your malicious post.


Jquery
4-: DOM XSS in jQuery anchor href attribute sink using location.search source
4-: https://portswigger.net/web-security/cross-site-scripting/dom-based/lab-jquery-href-attribute-sink
    
                     <script>
                            $(function() {
                                $('#backLink').attr("href", (new URLSearchParams(window.location.search)).get('returnPath'));
                            });
                        </script>
ANS:-
1-: On the Submit feedback page, change the query parameter returnPath to / followed by a random alphanumeric string.
2-: Right-click and inspect the element, and observe that your random string has been placed inside an a href attribute.
3-: Change returnPath to javascript:alert(document.cookie), then hit enter and click "back".
4-: https://ac221fad1e8c9718c0fc3b6200b2007b.web-security-academy.net/feedback?returnPath=javascript:alert(document.cookie)

___________________________________-----------
The DOMxSS aries when JavaScript takes data from an attacker-controlable source ,such as the url and passes it to a sink that supports dynamic code execution .such as eval() or innerHTML To deliver a DOM-based XSS attack, you need to place data into a source so that it is propagated to a sink and causes execution of arbitrary JavaScript.  window.location object. An attacker can construct a link to send a victim to a vulnerable page with a payload in the query string and fragment portions of the URL. In certain circumstances, such as when targeting a 404 page or a website running PHP, the payload can also be placed in the path. 

Testing HTML sinks
#1
First find target like location() 
#2
Ctrl+U
#3
Ctrl+F (in view source)
#4
JavaScript Debugger#5
Now find that the source gets assigned to other variables. If this is the case, you'll need to use the search function again to track these variables and see if they're passed to a sink. When you find a sink that is being assigned data that originated from the source, you can use the debugger to inspect the value by hovering over the variable to show its value before it is sent to the sink. Then, as with HTML sinks, you need to refine your input to see if you can deliver a successful XSS attack.

Testing for DOM XSS Using DOM Invader

#1
https://portswigger.net/burp/documentation/desktop/tools/dominvader/
Exploiting_DOM_XSS_with_Diff_Source_and_sinks

